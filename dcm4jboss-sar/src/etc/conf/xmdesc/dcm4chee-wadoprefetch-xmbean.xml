<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mbean PUBLIC
   "-//JBoss//DTD JBOSS XMBEAN 1.1//EN"
   "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_1.dtd">

<mbean>
   <description><![CDATA[WADO Prefetch Service.<br/>
   		This service is triggered by SeriesStored notifications and use a stylesheet (<code>wado-prefetch.xsl</code>) 
   		to get WADO URLs and optional an exportPath.<br>
   		Both are based on series level and will be extended with the SOP InstanceUIDs 
   		in Referenced Series Sequence (0008,1115)
   		<dl>
   			<dt>Output format of <code>wado-prefetch.xsl</code>:</dt>
   			<dd>&lt;wado-prefetches&gt;</dd>
   			<dd>&nbrsp;&nbrsp;&lt;prefetch wadourl="" [exportPath=""] /&gt;</dd>
   			<dd>&nbrsp;&nbrsp;...</dd>
   			<dd>&lt;/wado-prefetches&gt;</dd>
   			<dd/>
   			<dd>wadourl    : WADO URL without objectUID parameter. (will be added for every image of the series)</dd> 
   			<dd>exportPath : Directory path for exported images. '{0}' will be replaced with SOP Instance UID</dd>
   			<dd>e.g.: &lt;prefetch wado="http://localhost:8080/wado?requestType=WADO&amp;studyUID=1.2.3&amp;seriesUID=1.2.4"</dd>
   			<dd>                   exportPath="exported/1.2.3/1.2.4/{0}.jpg" /&gt;</dd> 
   		</dl>
   ]]></description>

   <descriptors>
      <persistence persistPolicy="OnUpdate"/>
      <persistence-manager value="org.jboss.mx.persistence.DelegatingPersistenceManager"/>
   </descriptors>

   <class>org.dcm4chex.archive.mbean.WadoPrefetchService</class>

   <constructor>
      <description>The default constructor</description>
      <name>WadoPrefetchService</name>
   </constructor>

   <!-- Attributes -->
   <attribute access="read-write"
      getMethod="getWadoBaseUrl"
      setMethod="setWadoBaseUrl">
      <description><![CDATA[Base WADO URL that can be extended in a stylesheet to get 
        the <code>wadourl</code> attribute.<br />
      	This URL should contain request parameter 'requestType=WADO'
      ]]></description>
      <name>WadoBaseUrl</name>
      <type>java.lang.String</type>
      <descriptors>
         <value value="http://localhost:8080/wado?requestType=WADO" />
      </descriptors>
   </attribute>

   <attribute access="read-write"
      getMethod="getExportBasePath"
      setMethod="setExportBasePath">
      <description><![CDATA[Base directory path where exported images will be stored.<br />
      This directory can be used in a stylesheet to build the <code>exportPath</code> attribute.
      A relative path name is resolved relative to <i>archive-install-directory</i>/server/default/.]]>  
      </description>
      <name>ExportBasePath</name>
      <type>java.lang.String</type>
      <descriptors>
         <value value="exported/images" />
      </descriptors>
   </attribute>

   <attribute access="read-write"
      getMethod="getConfigDir"
      setMethod="setConfigDir">
      <description><![CDATA[Directory where configuration files defining
      WADO Prefetch rules are located: if XSL stylesheet <code>wado-prefetch.xsl</code> exists in
      this directory or in a sub-directory equal to the AE Title of the
      Storage SCU, images of received Series will be prefetched (and optional exported)
      according the rules in the stylesheet.
      A relative path name is resolved relative to
      <i>archive-install-directory</i>/server/default/.]]>  
      </description>
      <name>CoerceConfigDirectory</name>
      <type>java.lang.String</type>
      <descriptors>
         <value value="conf/dcm4chee-ae"/>
      </descriptors>
   </attribute>
   <attribute access="read-write"
      getMethod="getRetryIntervalls"
      setMethod="setRetryIntervalls">
      <description><![CDATA[Number and interval of retries made for
      failed WADO Prefetch orders.
      <br>Format:
      <br>Comma separated list of <i>number</i>x<i>interval</i> pairs or NEVER to disable retry for any destinations.
      <br>The interval can be specified in seconds (##s),
      minutes (##m), hours (##h) or days (##d).
      <br/>Example: 
      <br/>5x1m,10x10m means retry a total of 5 times, one minute
      apart for each retry; then retry a total of 10 times, 10 minutes 
      ]]>
      </description>
      <name>RetryIntervals</name>
      <type>java.lang.String</type>
      <descriptors>
         <value value="5x5m,24x1h,7x1d" />
      </descriptors>
   </attribute>
   <attribute access="read-write"
      getMethod="getQueueName"
      setMethod="setQueueName">
      <description>Used internally. Do NOT modify.
      </description>
      <name>QueueName</name>
      <type>java.lang.String</type>
   </attribute>
   <attribute access="read-write"
      getMethod="getStoreScpServiceName"
      setMethod="setStoreScpServiceName">
      <description>Used internally. Do NOT modify.
      </description>
      <name>StoreScpServiceName</name>
      <type>javax.management.ObjectName</type>
   </attribute>
   <attribute access="read-write" 
      getMethod="getTemplatesServiceName"
      setMethod="setTemplatesServiceName">
      <description>Used internally. Do NOT modify.
      </description>
      <name>TemplatesServiceName</name>
      <type>javax.management.ObjectName</type>
   </attribute>
    <attribute access="read-write"
      getMethod="getJmsServiceName"
      setMethod="setJmsServiceName">
      <description>Used internally. Do NOT modify.
      </description>
      <name>JMSServiceName</name>
      <type>javax.management.ObjectName</type>
   </attribute>
    &defaultAttributes;
   <!-- Operations -->
   &defaultOperations;
   
</mbean>

