
/*****************************************************************************
 *                                                                           *
 *  Copyright (c) 2001,2002 by TIANI MEDGRAPH AG                             *
 *                                                                           *
 *  This file is part of dcm4che.                                            *
 *                                                                           *
 *  This library is free software; you can redistribute it and/or modify it  *
 *  under the terms of the GNU Lesser General Public License as published    *
 *  by the Free Software Foundation; either version 2 of the License, or     *
 *  (at your option) any later version.                                      *
 *                                                                           *
 *  This library is distributed in the hope that it will be useful, but      *
 *  WITHOUT ANY WARRANTY; without even the implied warranty of               *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU        *
 *  Lesser General Public License for more details.                          *
 *                                                                           *
 *  You should have received a copy of the GNU Lesser General Public         *
 *  License along with this library; if not, write to the Free Software      *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA  *
 *                                                                           *
 *****************************************************************************
 *  This file was automatically generated by XSLT from                       *
 *  src/etc/dictionary.xml applying stylesheet src/etc/Status.xsl.           *
 *  Manually modifications will be lost with next auto generation. For       *
 *  permanent modification edit the XML source or/and the XSL stylesheet.    *
 *****************************************************************************/

package org.dcm4che.dict;

/** Provides tag constants.
 *
 * @author gunter zeilinger
 * @version 1.0.3
 */
public class Status {

    /** Private constructor */
    private Status() {
    }
    
    public static final int forName(String name) {
       try {
          return Status.class.getField(name).getInt(null);
       } catch (IllegalAccessException e) {
          throw new Error(e);
       } catch (NoSuchFieldException e) {
          throw new IllegalArgumentException("Unkown Status Name: " + name);
       }
    }

    public static String toString(int status) {
        return Tags.toHexString(new StringBuffer(4),status, 4).toString();
    }    

    /**  Success: Success */
    public static final int Success = 0x0000;

    /**  Cancel: Cancel */
    public static final int Cancel = 0xFE00;

    /**  Pending: Pending */
    public static final int Pending = 0xFF00;

    /**  Warning: Attribute list error */
    public static final int AttributeListError = 0x0107;

    /**  Warning: Attribute Value Out of Range */
    public static final int AttributeValueOutOfRange = 0x0116;

    /**  Failure: Refused: SOP class not supported */
    public static final int SOPClassNotSupported = 0x0122;

    /**  Failure: Class-instance conflict */
    public static final int ClassInstanceConflict = 0x0119;

    /**  Failure: Duplicate SOP instance */
    public static final int DuplicateSOPInstance = 0x0111;

    /**  Failure: Duplicate invocation */
    public static final int DuplicateInvocation = 0x0210;

    /**  Failure: Invalid argument value */
    public static final int InvalidArgumentValue = 0x0115;

    /**  Failure: Invalid attribute value */
    public static final int InvalidAttributeValue = 0x0106;

    /**  Failure: Invalid object instance */
    public static final int InvalidObjectInstance = 0x0117;

    /**  Failure: Missing attribute */
    public static final int MissingAttribute = 0x0120;

    /**  Failure: Missing attribute value */
    public static final int MissingAttributeValue = 0x0121;

    /**  Failure: Mistyped argument */
    public static final int MistypedArgument = 0x0212;

    /**  Failure: No such argument */
    public static final int NoSuchArgument = 0x0114;

    /**  Failure: No such attribute */
    public static final int NoSuchAttribute = 0x0105;

    /**  Failure: No such event type */
    public static final int NoSuchEventType = 0x0113;

    /**  Failure: No Such object instance */
    public static final int NoSuchObjectInstance = 0x0112;

    /**  Failure: No Such SOP class */
    public static final int NoSuchSOPClass = 0x0118;

    /**  Failure: Processing failure */
    public static final int ProcessingFailure = 0x0110;

    /**  Failure: Resource limitation */
    public static final int ResourceLimitation = 0x0213;

    /**  Failure: Unrecognized operation */
    public static final int UnrecognizedOperation = 0x0211;

    /**  Failure: No such action type */
    public static final int NoSuchActionType = 0x0123;

    /** Storage Failure: Out of Resources */
    public static final int StorageOutOfResources = 0xA700;

    /** Storage Failure: Data Set does not match SOP Class (Error) */
    public static final int DataSetDoesNotMatchSOPClassError = 0xA900;

    /** Storage Failure: Cannot understand */
    public static final int CannotUnderstand = 0xC000;

    /** Storage Warning: Coercion of Data Elements */
    public static final int CoercionOfDataElements = 0xB000;

    /** Storage Warning: Data Set does not match SOP Class (Warning) */
    public static final int DataSetDoesNotMatchSOPClassWarning = 0xB007;

    /** Storage Warning: Elements Discarded */
    public static final int ElementsDiscarded = 0xB006;

    /** QueryRetrieve Failure: Out of Resources */
    public static final int OutOfResources = 0xA700;

    /** QueryRetrieve Failure: Unable to calculate number of matches */
    public static final int UnableToCalculateNumberOfMatches = 0xA701;

    /** QueryRetrieve Failure: Unable to perform suboperations */
    public static final int UnableToPerformSuboperations = 0xA702;

    /** QueryRetrieve Failure: Move Destination unknown */
    public static final int MoveDestinationUnknown = 0xA801;

    /** QueryRetrieve Failure: Identifier does not match SOP Class */
    public static final int IdentifierDoesNotMatchSOPClass = 0xA900;

    /** QueryRetrieve Failure: Unable to process */
    public static final int UnableToProcess = 0xC000;

    /** QueryRetrieve Pending: Optional Keys Not Supported */
    public static final int OptionalKeysNotSupported = 0xFF01;

    /** QueryRetrieve Warning: Sub-operations Complete - One or more Failures */
    public static final int SubOpsOneOrMoreFailures = 0xB000;

    /** PrintManagement Warning: Memory allocation not supported */
    public static final int MemoryAllocationNotSupported = 0xB000;

    /** PrintManagement Warning: Film session printing (collation) is not supported */
    public static final int FilmSessionPrintingNotSupported = 0xB601;

    /** PrintManagement Warning: Film session SOP instance hierarchy does not contain image box SOP instances (empty page) */
    public static final int FilmSessionEmptyPage = 0xB602;

    /** PrintManagement Warning: Film box SOP instance hierarchy does not contain image box SOP instances (empty page) */
    public static final int FilmBoxEmptyPage = 0xB603;

    /** PrintManagement Warning: Image size is larger than image box size, the image has been demagnified */
    public static final int ImageDemagnified = 0xB604;

    /** PrintManagement Warning: Requested min density or max density outside of printer's operating range */
    public static final int MinMaxDensityOutOfRange = 0xB605;

    /** PrintManagement Warning: Image size is larger than the image box size, the Image has been cropped to fit */
    public static final int ImageCropped = 0xB609;

    /** PrintManagement Warning: Image size or combined print image size is larger than the image box size, image or combined print image has been decimated to fit */
    public static final int ImageDecimated = 0xB60A;

    /** PrintManagement Failure: Film session SOP instance hierarchy does not contain film box SOP instances */
    public static final int FilmSessionEmpty = 0xC600;

    /** PrintManagement Failure: Unable to create Print Job SOP Instance; print queue is full */
    public static final int PrintQueueFull = 0xC601;

    /** PrintManagement Failure: Image size is larger than image box size */
    public static final int ImageLargerThanImageBox = 0xC603;

    /** PrintManagement Failure: Insufficient memory in printer to store the image */
    public static final int InsufficientMemoryInPrinter = 0xC605;

    /** PrintManagement Failure: Combined Print Image size is larger than the Image Box size */
    public static final int CombinedImageLargerThanImageBox = 0xC613;

    /** PrintManagement Failure: There is an existing film box that has not been printed and N-ACTION at the Film Session level is not supported. */
    public static final int ExistingFilmBoxNotPrinted = 0xC616;

    /** MediaCreationManagement Failure: Refused because an Initiate Media Creation action has already been received for this SOP Instance */
    public static final int DuplicateInitiateMediaCreation = 0xA510;

    /** MediaCreationManagement Failure: Media creation request already completed */
    public static final int MediaCreationRequestAlreadyCompleted = 0xC201;

    /** MediaCreationManagement Failure: Media creation request already in progress and cannot be interrupted */
    public static final int MediaCreationRequestAlreadyInProgress = 0xC202;

    /** MediaCreationManagement Failure: Cancellation denied for unspecified reason */
    public static final int CancellationDeniedForUnspecifiedReason = 0xC203;

}